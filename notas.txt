https://www.seas.upenn.edu/~cis552/12fa/lectures/stub/RandomGen.html
https://stackoverflow.com/questions/19594655/random-number-in-haskell

teste de primalidade de Fermat
teste de primalidade de Miller-Rabin

Input #1: n > 3, an odd integer to be tested for primality
Input #2: k, the number of rounds of testing to perform
Output: “composite” if n is found to be composite, “probably prime” otherwise

write n as 2r·d + 1 with d odd (by factoring out powers of 2 from n − 1)
WitnessLoop: repeat k times:
pick a random integer a in the range [2, n − 2]
x ← ad mod n
if x = 1 or x = n − 1 then
continue WitnessLoop
repeat r − 1 times:
x ← x2 mod n
if x = n − 1 then
continue WitnessLoop
return “composite”
return “probably prime”


dicas replit haskell:
  -> arquivo nix deve ser assim:
 { pkgs }: {
    deps = [
        pkgs.haskellPackages.cabal-install
        pkgs.cabal-install
        (pkgs.haskellPackages.ghcWithPackages (pkgs: [
            #cabal-install
        ]))
        pkgs.haskell-language-server
    ];
}
  rodar no shell:
    cabal update
    cabal install --lib random
  import System.Random
  
